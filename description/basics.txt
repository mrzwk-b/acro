uses only the 26 uppercase letters of the latin alphabet and digits zero-nine
    we may also need parentheses (for expression boundary disambiuation)
    and hyphens (for integer negation)
all other characters are ignored
    lowercase letters make convenient comments

vm consists of an infinite list (starts full of nulls) (+ a main)
slots contain objects which are themselves infinite lists of either bools or more objects (+ a main)
    even ints are conceptually just lists of bools
    strings are lists of ints

gets
    a Gets expression ensures that
        whenever you use the left operand in another expression,
        it'll evaluate to the result of whatever expression you pass as the right operand
    typically used with Access
    can be used with a Length expression to slice the end off a list
    can also be used with Read to write

read
    reads from a source based on the object passed as an arguments
        writes to destination if used as left operand of Gets
    "RS" defines character encoding
    "RM" references the program being run (maybe? we'll see)

main/invoke/functions
    when an object is invoked, its main is evaluated and returned
    "F" syntax creates a function object, where the executable code is stored in the object's main
        the object's list can be used to hold parameters, accessible via "S" inside the "F" block
    a main can be reassigned with "_AM G_"
        non-executable mains simply evaluate to the value stored in them

self
    "S" is a meaningful keyword in 3 contexts, inside a
        defer statement then block
            refers to the value returned by the asynchronous expression
        function
            refers to the object the function belongs to,
            whose lists holds arguments and whose main is the function itself (enabling recursion)
        catch statement then block
            refers to the error being caught, which can in principle be any object

    if these constructs are nested, use "SAS" to go one level up
        "(SAS)AS" for two levels up, and so on

jump/place
    useful for flow control
    "P" creates a reference point to jump to, no side effects
    "J_" moves to the reference point that many instances away, i.e.,
        "P J-1" creates an infinite loop
        "J2 D1TPE P" skips the infinite loop
        "P J0 P" does nothing

defer/wait
    used for asynchronous programming
    defer blocks evaluate their expression asynchronously and execute a callback on their completion
    wait stalls the program until the value of an expression is not zilch, then results in that value

tokens:
    Access
    Borrow (import)
    Copy
    Defer
    End
    Function
    Gets (assignment)
catcH
    If
    Jump (to token)
 linK (create lists)
    Length (number of highest assigned variable)
    Main
    Not (also else)
 thrOw
    Place (creates breakpoints for Jump)
   eQual
    Read
    Self (this)
    Then
    Unless (XOR)
  inVoke (call)
    Wait
   eXamine (cast to int)
    Yield (return)
    Zilch (null)
